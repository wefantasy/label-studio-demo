{"env_info": "sys.platform: win32\nPython: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3050 Ti Laptop GPU\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30145 \u7248\nGCC: n/a\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.5.5\nMMCV: 1.5.1\nMMCV Compiler: MSVC 192930140\nMMCV CUDA Compiler: 11.5\nMMDetection: 2.24.0+", "config": "dataset_type = 'COCODataset'\ndata_root = 'D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train/result.json',\n        img_prefix='D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('face', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        'D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train/result.json',\n        img_prefix='D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('face', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        'D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train/result.json',\n        img_prefix='D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('face', )))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'C:/Users/Fantasy/Desktop/dataset/work_dir/latest.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nmodel = dict(\n    type='FCOS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=1,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\nclasses = ('face', )\nwork_dir = 'D:\\CommonProject\\LabelStudio\\backend\\model\\workdir\\train\\work_dir'\nauto_resume = None\ngpu_ids = [0]\n", "seed": 908780391, "exp_name": "fcos_common.py"}
{"mode": "val", "epoch": 1, "iter": 8, "lr": 0.00333, "bbox_mAP": 0.638, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.641, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.752, "bbox_mAP_copypaste": "0.638 0.840 0.641 -1.000 0.000 0.752"}
{"mode": "val", "epoch": 2, "iter": 8, "lr": 0.00333, "bbox_mAP": 0.648, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.641, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.767, "bbox_mAP_copypaste": "0.648 0.840 0.641 -1.000 0.000 0.767"}
{"mode": "val", "epoch": 3, "iter": 8, "lr": 0.00333, "bbox_mAP": 0.683, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.691, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.81, "bbox_mAP_copypaste": "0.683 0.840 0.691 -1.000 0.000 0.810"}
{"mode": "val", "epoch": 4, "iter": 8, "lr": 0.00333, "bbox_mAP": 0.707, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.691, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.835, "bbox_mAP_copypaste": "0.707 0.840 0.691 -1.000 0.000 0.835"}
{"mode": "val", "epoch": 5, "iter": 8, "lr": 0.00333, "bbox_mAP": 0.541, "bbox_mAP_50": 0.809, "bbox_mAP_75": 0.809, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.667, "bbox_mAP_copypaste": "0.541 0.809 0.809 -1.000 0.000 0.667"}
